{"version":3,"sources":["../webpack/universalModuleDefinition","serviceWorker.js","index.tsx","public-path.js"],"names":["root","factory","exports","module","define","amd","window","Boolean","location","hostname","match","render","props","container","document","body","style","position","width","height","top","left","background","backgroundSize","backgroundImage","transition","images","pointer","setInterval","image","length","storeTest","onGlobalStateChange","value","prev","console","log","name","setGlobalState","ignore","user","bootstrap","a","mount","unmount","ReactDOM","unmountComponentAtNode","querySelector","__POWERED_BY_QIANKUN__","navigator","serviceWorker","ready","then","registration","unregister","__webpack_public_path__","__INJECTED_PUBLIC_PATH_BY_QIANKUN__"],"mappings":"CAAA,SAA2CA,EAAMC,GAC1B,kBAAZC,SAA0C,kBAAXC,OACxCA,OAAOD,QAAUD,IACQ,oBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,kBAAZC,QACdA,QAAQ,gBAAkBD,IAE1BD,EAAK,gBAAkBC,IARzB,CASGK,QAAQ,WACX,O,uQCEoBC,QACW,cAA7BD,OAAOE,SAASC,UAEe,UAA7BH,OAAOE,SAASC,UAEhBH,OAAOE,SAASC,SAASC,MAAM,2D,oBCTnC,SAASC,EAAOC,GACQA,EAAdC,UAORC,SAASC,KAAKC,MAAMC,SAAY,QAChCH,SAASC,KAAKC,MAAME,MAAS,OAC7BJ,SAASC,KAAKC,MAAMG,OAAU,OAC9BL,SAASC,KAAKC,MAAMI,IAAO,IAC3BN,SAASC,KAAKC,MAAMK,KAAQ,IAC5BP,SAASC,KAAKC,MAAMM,WAAc,OAClCR,SAASC,KAAKC,MAAMO,eAAkB,QACtCT,SAASC,KAAKC,MAAMQ,gBAAmB,kDACvCV,SAASC,KAAKC,MAAMS,WAAc,6BAClC,IAAIC,EAAS,CACX,mEACA,mEACA,qEACA,sEAGFC,EAAU,EAEZC,aAAY,WACV,IAAIC,EAAQH,EAAOC,EAAUD,EAAOI,QACpChB,SAASC,KAAKC,MAAMQ,gBAAkB,OAASK,EAAQ,IACvDF,GAAW,IANH,KAUV,SAASI,EAAUnB,GACjBA,EAAMoB,qBACJ,SAACC,EAAYC,GAAb,OACEC,QAAQC,IAAR,iCAAsCxB,EAAMyB,KAA5C,MAAsDJ,EAAOC,MAC/D,GAEFtB,EAAM0B,eAAe,CACnBC,OAAQ3B,EAAMyB,KACdG,KAAM,CACJH,KAAMzB,EAAMyB,QAUX,SAAeI,IAAtB,+B,4CAAO,sBAAAC,EAAA,sDACLP,QAAQC,IAAI,mCADP,4C,sBAIA,SAAeO,EAAtB,kC,4CAAO,WAAqB/B,GAArB,SAAA8B,EAAA,sDACLP,QAAQC,IAAI,sCAAuCxB,GACnDmB,EAAUnB,GACVD,EAAOC,GAHF,4C,sBAMA,SAAegC,EAAtB,kC,4CAAO,WAAuBhC,GAAvB,eAAA8B,EAAA,sDACG7B,EAAcD,EAAdC,UACRgC,IAASC,uBACPjC,EACIA,EAAUkC,cAAc,SACxBjC,SAASiC,cAAc,UALxB,4C,sBAdFzC,OAAO0C,wBACVrC,EAAO,IDiEH,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,qDE5HfhD,OAAO0C,yBAETO,IAA0BjD,OAAOkD,uC","file":"static/js/main.a5c352bc.chunk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react16-main\"] = factory();\n\telse\n\t\troot[\"react16-main\"] = factory();\n})(window, function() {\nreturn ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import \"./public-path\";\r\n\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nimport App from \"./App\";\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nfunction render(props: any) {\r\n  const { container } = props;\r\n  // ReactDOM.render(\r\n  //   <App />,\r\n  //   container\r\n  //     ? container.querySelector(\"#root\")\r\n  //     : document.querySelector(\"#root\")\r\n  // );\r\n  document.body.style.position =  \"fixed\";\r\n  document.body.style.width =  \"100%\";\r\n  document.body.style.height =  \"100%\";\r\n  document.body.style.top =  \"0\";\r\n  document.body.style.left =  \"0\";\r\n  document.body.style.background =  \"#000\";\r\n  document.body.style.backgroundSize =  \"cover\";\r\n  document.body.style.backgroundImage =  \"url(https://wallpaperaccess.com/full/38175.jpg)\";\r\n  document.body.style.transition =  \" background 1s ease-in-out\";\r\n  var images = [\r\n    \"https://images.pexels.com/photos/853199/pexels-photo-853199.jpeg\",\r\n    \"https://images.pexels.com/photos/842711/pexels-photo-842711.jpeg\",\r\n    \"https://images.pexels.com/photos/1252869/pexels-photo-1252869.jpeg\",\r\n    \"https://images.pexels.com/photos/1402787/pexels-photo-1402787.jpeg\",\r\n  ],\r\n  delay = 10000, // 3 seconds\r\n  pointer = 0;\r\n\r\nsetInterval(function () {\r\n  var image = images[pointer % images.length];\r\n  document.body.style.backgroundImage = \"url(\" + image + \")\";\r\n  pointer += 1;\r\n}, delay);\r\n}\r\n\r\nfunction storeTest(props: any) {\r\n  props.onGlobalStateChange(\r\n    (value: any, prev: any) =>\r\n      console.log(`[onGlobalStateChange - ${props.name}]:`, value, prev),\r\n    true\r\n  );\r\n  props.setGlobalState({\r\n    ignore: props.name,\r\n    user: {\r\n      name: props.name,\r\n    },\r\n  });\r\n}\r\n\r\n//@ts-ignore\r\nif (!window.__POWERED_BY_QIANKUN__) {\r\n  render({});\r\n}\r\n\r\nexport async function bootstrap() {\r\n  console.log(\"[react16] react app bootstraped\");\r\n}\r\n\r\nexport async function mount(props: any) {\r\n  console.log(\"[react16] props from main framework\", props);\r\n  storeTest(props);\r\n  render(props);\r\n}\r\n\r\nexport async function unmount(props: any) {\r\n  const { container } = props;\r\n  ReactDOM.unmountComponentAtNode(\r\n    container\r\n      ? container.querySelector(\"#root\")\r\n      : document.querySelector(\"#root\")\r\n  );\r\n}\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","if (window.__POWERED_BY_QIANKUN__) {\r\n  // eslint-disable-next-line no-undef\r\n  __webpack_public_path__ = window.__INJECTED_PUBLIC_PATH_BY_QIANKUN__;\r\n}\r\n"],"sourceRoot":""}